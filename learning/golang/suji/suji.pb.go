// Code generated by protoc-gen-go. DO NOT EDIT.
// source: suji.proto

/*
Package suji is a generated protocol buffer package.

It is generated from these files:
	suji.proto

It has these top-level messages:
	SayRequest
	SayReply
*/
package suji

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SayRequest struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *SayRequest) Reset()                    { *m = SayRequest{} }
func (m *SayRequest) String() string            { return proto.CompactTextString(m) }
func (*SayRequest) ProtoMessage()               {}
func (*SayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SayRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SayReply struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *SayReply) Reset()                    { *m = SayReply{} }
func (m *SayReply) String() string            { return proto.CompactTextString(m) }
func (*SayReply) ProtoMessage()               {}
func (*SayReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SayReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SayRequest)(nil), "suji.SayRequest")
	proto.RegisterType((*SayReply)(nil), "suji.SayReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Suji service

type SujiClient interface {
	Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error)
}

type sujiClient struct {
	cc *grpc.ClientConn
}

func NewSujiClient(cc *grpc.ClientConn) SujiClient {
	return &sujiClient{cc}
}

func (c *sujiClient) Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayReply, error) {
	out := new(SayReply)
	err := grpc.Invoke(ctx, "/suji.Suji/Say", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Suji service

type SujiServer interface {
	Say(context.Context, *SayRequest) (*SayReply, error)
}

func RegisterSujiServer(s *grpc.Server, srv SujiServer) {
	s.RegisterService(&_Suji_serviceDesc, srv)
}

func _Suji_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SujiServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suji.Suji/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SujiServer).Say(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Suji_serviceDesc = grpc.ServiceDesc{
	ServiceName: "suji.Suji",
	HandlerType: (*SujiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _Suji_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "suji.proto",
}

func init() { proto.RegisterFile("suji.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2e, 0xcd, 0xca,
	0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xe4, 0xb8, 0xb8, 0x82, 0x13,
	0x2b, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x73, 0x8b, 0xd3, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25, 0x19, 0x2e, 0x0e, 0xb0, 0x7c, 0x41, 0x4e,
	0x25, 0xa6, 0xac, 0x91, 0x21, 0x17, 0x4b, 0x70, 0x69, 0x56, 0xa6, 0x90, 0x26, 0x17, 0x73, 0x70,
	0x62, 0xa5, 0x90, 0x80, 0x1e, 0xd8, 0x7c, 0x84, 0x81, 0x52, 0x7c, 0x48, 0x22, 0x05, 0x39, 0x95,
	0x4a, 0x0c, 0x49, 0x6c, 0x60, 0xdb, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x99, 0x5a, 0x9e,
	0x6f, 0x8b, 0x00, 0x00, 0x00,
}
