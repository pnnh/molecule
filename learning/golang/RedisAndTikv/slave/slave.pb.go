// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slave/slave.proto

/*
Package slave is a generated protocol buffer package.

It is generated from these files:
	slave/slave.proto

It has these top-level messages:
	SendRequest
	SendReply
*/
package slave

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendRequest struct {
	Sid string `protobuf:"bytes,10,opt,name=sid" json:"sid,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

// 踢人请求
type SendReply struct {
	Device string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *SendReply) Reset()                    { *m = SendReply{} }
func (m *SendReply) String() string            { return proto.CompactTextString(m) }
func (*SendReply) ProtoMessage()               {}
func (*SendReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SendReply) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func init() {
	proto.RegisterType((*SendRequest)(nil), "slave.SendRequest")
	proto.RegisterType((*SendReply)(nil), "slave.SendReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Slave service

type SlaveClient interface {
	// 发送文字消息
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error)
}

type slaveClient struct {
	cc *grpc.ClientConn
}

func NewSlaveClient(cc *grpc.ClientConn) SlaveClient {
	return &slaveClient{cc}
}

func (c *slaveClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := grpc.Invoke(ctx, "/slave.Slave/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Slave service

type SlaveServer interface {
	// 发送文字消息
	Send(context.Context, *SendRequest) (*SendReply, error)
}

func RegisterSlaveServer(s *grpc.Server, srv SlaveServer) {
	s.RegisterService(&_Slave_serviceDesc, srv)
}

func _Slave_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slave.Slave/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Slave_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slave.Slave",
	HandlerType: (*SlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Slave_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slave/slave.proto",
}

func init() { proto.RegisterFile("slave/slave.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0xce, 0x49, 0x2c,
	0x4b, 0xd5, 0x07, 0x93, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x8e, 0x92, 0x3c,
	0x17, 0x77, 0x70, 0x6a, 0x5e, 0x4a, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x00, 0x17,
	0x73, 0x71, 0x66, 0x8a, 0x04, 0x97, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0xa9, 0xa4, 0xcc, 0xc5,
	0x09, 0x51, 0x50, 0x90, 0x53, 0x29, 0x24, 0xc6, 0xc5, 0x96, 0x92, 0x5a, 0x96, 0x99, 0x9c, 0x2a,
	0xc1, 0x08, 0x56, 0x01, 0xe5, 0x19, 0x99, 0x73, 0xb1, 0x06, 0x83, 0x8c, 0x13, 0xd2, 0xe3, 0x62,
	0x01, 0xa9, 0x16, 0x12, 0xd2, 0x83, 0xd8, 0x85, 0x64, 0xb6, 0x94, 0x00, 0x8a, 0x58, 0x41, 0x4e,
	0xa5, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x31, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x1b,
	0x8d, 0x17, 0xa1, 0x00, 0x00, 0x00,
}
